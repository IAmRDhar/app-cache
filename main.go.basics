package main

import (
	"fmt"
	"log"
	"strconv"

	"github.com/gomodule/redigo/redis"
)

type Album struct {
	Title  string  `redis:"title"`
	Artist string  `redis:"artist"`
	Price  float64 `redis:"price"`
	Likes  int     `redis:"likes"`
}

func main() {

	// Dialing connection to Redis server, listening on port 6379
	conn, err := redis.Dial("tcp", "localhost:6379")
	if err != nil {
		log.Fatal(err)
	}

	defer conn.Close()

	// _, err = conn.Do("HMSET", "album:1", "title", "Electric Ladyland", "artist", "Jimi Hendrix", "price", 4.95, "likes", 8)
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// fmt.Println("Electric Ladyland added!")

	// title, err := redis.String(conn.Do("HGET", "album:1", "title"))
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// artist, err := redis.String(conn.Do("HGET", "album:1", "artist"))
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// price, err := redis.Float64(conn.Do("HGET", "album:1", "price"))
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// likes, err := redis.Int(conn.Do("HGET", "album:1", "likes"))
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// fmt.Printf("%s by %s: Â£%.2f [%d likes]\n", title, artist, price, likes)

	// reply, err := redis.StringMap(conn.Do("HGETALL", "album:1"))
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// album, err := populateAlbum(reply)
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// fmt.Printf("%+v", album)

	values, err := redis.Values(conn.Do("HGETALL", "album:1"))
	if err != nil {
		log.Fatal(err)
	}

	var album Album
	err = redis.ScanStruct(values, &album)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("%+v", album)
}

// func populateAlbum(reply map[string]string) (*Album, error) {
// 	var err error
// 	album := new(Album)
// 	album.Title = reply["title"]
// 	album.Artist = reply["artist"]
// 	album.Price, err = strconv.ParseFloat(reply["price"], 64)
// 	if err != nil {
// 		return nil, err
// 	}
// 	album.Likes, err = strconv.Atoi(reply["likes"])
// 	if err != nil {
// 		return nil, err
// 	}
// 	return album, nil
// }
